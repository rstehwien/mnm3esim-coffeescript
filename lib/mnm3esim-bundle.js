// Generated by CoffeeScript 1.4.0
(function() {
  var Defense, Modifiable, ResistResult, Status, StatusModifier, Utils, utils, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Modifiable = require('./modifiable.coffee').Modifiable;

  ResistResult = (function() {

    function ResistResult(defense, d20, roll, degree, stress, status) {
      this.defense = defense;
      this.d20 = d20;
      this.roll = roll;
      this.degree = degree;
      this.stress = stress;
      this.status = status;
    }

    return ResistResult;

  })();

  Defense = (function(_super) {

    __extends(Defense, _super);

    function Defense(values) {}

    return Defense;

  })(Modifiable);

  utils = require('./utils.coffee').utils;

  Modifiable = (function() {

    function Modifiable(modifiable, properties, values) {
      this.rollCheck = __bind(this.rollCheck, this);

      this._applyModifiers = __bind(this._applyModifiers, this);
      this._modifiers = {};
      this._modifiable(modifiable);
      this._properties(properties);
      this._values(values);
    }

    Modifiable.prototype._modifiable = function(obj) {
      var k, v, _results,
        _this = this;
      if (obj != null) {
        _results = [];
        for (k in obj) {
          if (!__hasProp.call(obj, k)) continue;
          v = obj[k];
          _results.push((function(k, v) {
            _this["_" + k] = v;
            return Object.defineProperty(_this, k, {
              get: function() {
                return this._applyModifiers(k, this["_" + k]);
              },
              set: function(v) {
                return this["_" + k] = v;
              },
              enumerable: true,
              configurable: true
            });
          })(k, v));
        }
        return _results;
      }
    };

    Modifiable.prototype._properties = function(obj) {
      var k, v, _results,
        _this = this;
      if (obj != null) {
        _results = [];
        for (k in obj) {
          if (!__hasProp.call(obj, k)) continue;
          v = obj[k];
          _results.push((function(k, v) {
            return _this[k] = v;
          })(k, v));
        }
        return _results;
      }
    };

    Modifiable.prototype._values = function(obj) {
      var k, v, _results,
        _this = this;
      if (obj != null) {
        _results = [];
        for (k in obj) {
          if (!__hasProp.call(obj, k)) continue;
          v = obj[k];
          _results.push((function(k, v) {
            if (Object.prototype.hasOwnProperty.call(_this, k)) {
              return _this[k] = v;
            }
          })(k, v));
        }
        return _results;
      }
    };

    Modifiable.prototype._applyModifiers = function(k, v) {
      var m, modifiers, _i, _len;
      modifiers = [];
      if (this._modifiers[k] != null) {
        Array.prototype.push.apply(modifiers, this._modifiers[k]);
      }
      if (this._modifiers['ALL'] != null) {
        Array.prototype.push.apply(modifiers, this._modifiers['ALL']);
      }
      for (_i = 0, _len = modifiers.length; _i < _len; _i++) {
        m = modifiers[_i];
        v = m.call(this, v);
      }
      return v;
    };

    Modifiable.prototype.addModifier = function(k, m) {
      var _base, _ref;
      if ((_ref = (_base = this._modifiers)[k]) == null) {
        _base[k] = [];
      }
      return this._modifiers[k].push(m);
    };

    Modifiable.prototype.clearModifiers = function(k) {
      var key, value, _ref, _results;
      if (k != null) {
        return this._modifiers[k] = [];
      } else {
        _ref = this._modifiers;
        _results = [];
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          _results.push(this.clearModifiers(key));
        }
        return _results;
      }
    };

    Modifiable.prototype.rollCheck = function(bonus) {
      if (bonus == null) {
        bonus = 0;
      }
      return this._applyModifiers('rollCheck', utils.rollD20(bonus));
    };

    Modifiable.prototype.checkDegree = function(difficulty, check) {
      return utils.checkDegree(difficulty, check);
    };

    return Modifiable;

  })();

  module.exports = {
    Modifiable: Modifiable
  };

  _ = require('underscore');

  StatusModifier = (function() {

    function StatusModifier(group, property, modifier, description) {
      this.group = group;
      this.property = property;
      this.modifier = modifier;
      this.description = description;
    }

    return StatusModifier;

  })();

  Status = (function() {

    Status.STATUSES = null;

    function Status(value) {
      var def;
      if (value == null) {
        value = {};
      }
      def = {
        key: 'normal',
        degree: 0,
        recovery: false,
        replace: null,
        modifiers: null
      };
      value = _.extend(def, value);
      this.key = value.key;
      this.degree = value.degree;
      this.recovery = value.recovery;
      this.replace = value.replace;
      this.modifiers = value.modifiers;
      Status.STATUSES[this.key] = this;
    }

    Status.getStatus = function(s) {
      var v;
      if (s instanceof Status) {
        return s;
      } else if (_.isString(s)) {
        v = Status.STATUSES[s];
        if (!(v != null)) {
          throw new Error("Invalid status '" + s + "'");
        }
        return v;
      } else {
        return null;
      }
    };

    Status.combinedStatus = function(value) {
      var degrees, k, m, max, modifiers, status, statuses, _i, _len, _ref;
      statuses = Status._doExpandStatuses(value);
      modifiers = [];
      degrees = [];
      for (k in statuses) {
        if (!__hasProp.call(statuses, k)) continue;
        status = statuses[k];
        degrees.push(status.degree);
        if (_.isArray(status.modifiers)) {
          _ref = status.modifiers;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            m = _ref[_i];
            if (_.isArray(m)) {
              modifiers.push((function(func, args, ctor) {
                ctor.prototype = func.prototype;
                var child = new ctor, result = func.apply(child, args);
                return Object(result) === result ? result : child;
              })(StatusModifier, m, function(){}));
            }
          }
        }
      }
      max = degrees.length > 0 ? Math.max.apply(Math, degrees) : 0;
      return {
        'statuses': statuses,
        'modifiers': modifiers,
        'degree': max
      };
    };

    Status.expandStatuses = function(value) {
      return Status.combinedStatus(value)['statuses'];
    };

    Status.allModifiers = function(value) {
      return Status.combinedStatus(value)['modifiers'];
    };

    Status.degree = function(value) {
      return Status.combinedStatus(value)['degree'];
    };

    Status._doExpandStatuses = function(value) {
      var k, r, replacing, result, status, v, _i, _j, _len, _len1, _ref;
      if (_.isObject(value && !_.isArray(value && !_.isFunction(value)))) {
        value = _.values(value);
      }
      if (!_.isArray(value)) {
        value = [value];
      }
      result = {};
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        v = value[_i];
        status = Status.getStatus(v);
        if (!(status != null) || (result[status.key] != null)) {
          continue;
        }
        result[status.key] = status;
        if (_.isArray(status.modifiers)) {
          result = _.extend(result, Status._doExpandStatuses(status.modifiers));
        }
      }
      for (k in result) {
        if (!__hasProp.call(result, k)) continue;
        v = result[k];
        if (v.replace != null) {
          replacing = v.replace;
        }
      }
      if (replacing != null) {
        _ref = _.flatten(replacing);
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          r = _ref[_j];
          delete result[r];
        }
      }
      if (_.keys(result).length < 1) {
        result['normal'] = Status.getStatus('normal');
      }
      if ((result['normal'] != null) && _.keys(result).length > 1) {
        delete result['normal'];
      }
      return result;
    };

    Status._init = function() {
      var s, standardStatuses, _i, _len, _results;
      if (Status.STATUSES !== null) {
        return;
      }
      Status.STATUSES = {};
      standardStatuses = [
        {
          key: 'normal',
          degree: 0,
          recovery: false,
          replace: null,
          modifiers: null
        }, {
          key: 'compelled',
          degree: 2,
          recovery: false,
          replace: null,
          modifiers: ['actionPartial', 'actionsControlled']
        }, {
          key: 'controlled',
          degree: 3,
          recovery: false,
          replace: ['compelled'],
          modifiers: ['actionsControlled']
        }, {
          key: 'dazed',
          degree: 1,
          recovery: false,
          replace: null,
          modifiers: ['actionPartial']
        }, {
          key: 'debilitated',
          degree: 3,
          recovery: false,
          replace: ['disabled', 'weakened'],
          modifiers: ['actionNone']
        }, {
          key: 'defenseless',
          degree: 2,
          recovery: false,
          replace: ['vulnerable'],
          modifiers: [
            [
              'defense', 'value', (function(x) {
                return 0;
              }), 'defenseless'
            ]
          ]
        }, {
          key: 'disabled',
          degree: 2,
          recovery: false,
          replace: ['impaired'],
          modifiers: [
            [
              'ALL', 'rollCheck', (function(x) {
                return x - 5;
              }), 'disabled; -5 to checks'
            ]
          ]
        }, {
          key: 'fatigued',
          degree: 1,
          recovery: false,
          replace: null,
          modifiers: ['hindered']
        }, {
          key: 'hindered',
          degree: 1,
          recovery: false,
          replace: null,
          modifiers: [
            [
              'character', 'speed', (function(x) {
                return x - 1;
              }), 'hindered: -1 speed'
            ]
          ]
        }, {
          key: 'immobile',
          degree: 2,
          recovery: false,
          replace: ['hindered'],
          modifiers: [
            [
              'character', 'speed', (function(x) {
                return null;
              }), 'immoble: no speed'
            ]
          ]
        }, {
          key: 'impaired',
          degree: 1,
          recovery: false,
          replace: null,
          modifiers: [
            [
              'ALL', 'rollCheck', (function(x) {
                return x - 2;
              }), 'impaired; -2 to checks'
            ]
          ]
        }, {
          key: 'stunned',
          degree: 2,
          recovery: false,
          replace: ['dazed'],
          modifiers: ['actionNone']
        }, {
          key: 'transformed',
          degree: 3,
          recovery: false,
          replace: null,
          modifiers: ['actionNone']
        }, {
          key: 'unaware',
          degree: 3,
          recovery: false,
          replace: null,
          modifiers: ['actionNone']
        }, {
          key: 'vulnerable',
          degree: 1,
          recovery: false,
          replace: null,
          modifiers: [
            [
              'defense', 'value', (function(x) {
                return Math.ceil(x / 2.0);
              }), 'vulnerable: 1/2 defense'
            ]
          ]
        }, {
          key: 'weakened',
          degree: 1,
          recovery: false,
          replace: null,
          modifiers: null
        }, {
          key: 'asleep',
          degree: 3,
          recovery: false,
          replace: null,
          modifiers: ['defenseless', 'stunned', 'unaware']
        }, {
          key: 'blind',
          degree: 2,
          recovery: false,
          replace: null,
          modifiers: ['hindered', 'unaware', 'vulnerable', 'impaired']
        }, {
          key: 'bound',
          degree: 2,
          recovery: false,
          replace: null,
          modifiers: ['defenseless', 'immobile', 'impaired']
        }, {
          key: 'deaf',
          degree: 2,
          recovery: false,
          replace: null,
          modifiers: ['unaware']
        }, {
          key: 'dying',
          degree: 4,
          recovery: false,
          replace: null,
          modifiers: ['incapacitated']
        }, {
          key: 'entranced',
          degree: 1,
          recovery: true,
          replace: null,
          modifiers: ['actionNone']
        }, {
          key: 'exhausted',
          degree: 2,
          recovery: false,
          replace: ['fatigued'],
          modifiers: ['impaired', 'hindered']
        }, {
          key: 'incapacitated',
          degree: 3,
          recovery: false,
          replace: null,
          modifiers: ['defenseless', 'stunned', 'unaware', 'prone']
        }, {
          key: 'paralyzed',
          degree: 3,
          recovery: false,
          replace: null,
          modifiers: ['defenseless', 'immobile', 'stunned']
        }, {
          key: 'prone',
          degree: 2,
          recovery: false,
          replace: null,
          modifiers: [
            'hindered', [
              'defense', 'value', (function(x) {
                return x - 5;
              }), 'prone: -5 defense'
            ]
          ]
        }, {
          key: 'restrained',
          degree: 2,
          recovery: false,
          replace: null,
          modifiers: ['hindered', 'vulnerable']
        }, {
          key: 'staggered',
          degree: 2,
          recovery: false,
          replace: null,
          modifiers: ['dazed', 'hindered']
        }, {
          key: 'suprised',
          degree: 1,
          recovery: true,
          replace: null,
          modifiers: ['stunned', 'vulnerable']
        }, {
          key: 'actionPartial',
          degree: 0,
          recovery: false,
          replace: null,
          modifiers: [
            [
              'character', 'actions', (function(x) {
                return 'partial';
              }), 'partial actions'
            ]
          ]
        }, {
          key: 'actionNone',
          degree: 0,
          recovery: false,
          replace: ['actionPartial'],
          modifiers: [
            [
              'character', 'actions', (function(x) {
                return 'none';
              }), 'no actions'
            ]
          ]
        }, {
          key: 'actionsControlled',
          degree: 0,
          recovery: false,
          replace: null,
          modifiers: [
            [
              'character', 'isControlled', (function(x) {
                return true;
              }), 'actions controlled'
            ]
          ]
        }
      ];
      _results = [];
      for (_i = 0, _len = standardStatuses.length; _i < _len; _i++) {
        s = standardStatuses[_i];
        _results.push(new Status(s));
      }
      return _results;
    };

    return Status;

  })();

  Status._init();

  module.exports = {
    Status: Status,
    StatusModifier: StatusModifier
  };

  Utils = (function() {

    function Utils() {}

    Utils.rollD20 = function(bonus) {
      if (bonus == null) {
        bonus = 0;
      }
      return Math.floor(Math.random() * 20) + 1 + bonus;
    };

    Utils.checkDegree = function(difficulty, check) {
      var result;
      result = check - difficulty;
      return Math.floor(result / 5) + (result < 0 ? 0 : 1);
    };

    return Utils;

  })();

  module.exports = {
    utils: Utils
  };

}).call(this);
